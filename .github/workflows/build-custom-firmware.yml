name: Build Custom CircuitPython Firmware

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      circuitpython_version:
        description: 'CircuitPython Version (e.g., 9.2.8)'
        required: true
        default: '9.2.8' # Default to 9.2.8
      board_name:
        description: 'Target Board Name (e.g., yellobyte_yd_esp32_s3_n16r8v)'
        required: true
        default: 'yellobyte_yd_esp32_s3_n16r8v' # Default board

  # Triggers the workflow on push events to the main branch
  # You can customize this or add other branches/tags
  push:
    branches:
      - main

jobs:
  build_firmware:
    runs-on: ubuntu-latest
    # Use an official Espressif Docker container with ESP-IDF pre-installed
    # Check CircuitPython docs for the recommended ESP-IDF version for your CP version
    container:
      image: espressif/idf:v5.1.2 # Example: IDF v5.1.2

    steps:
    - name: Checkout CircuitPython Fork
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }} # Checks out your fork
        submodules: 'false' # We will handle submodules after checking out the tag

    - name: Get CircuitPython Version from Input or Default
      id: cp_version
      run: echo "version=${{ github.event.inputs.circuitpython_version || '9.2.8' }}" >> $GITHUB_OUTPUT

    - name: Get Board Name from Input or Default
      id: board_info
      run: echo "name=${{ github.event.inputs.board_name || 'yellobyte_yd_esp32_s3_n16r8v' }}" >> $GITHUB_OUTPUT

    - name: Checkout Specific CircuitPython Version Tag & Submodules
      working-directory: ${{ github.workspace }}
      run: |
        git fetch --all --tags --depth=100 # Fetch tags, depth might need adjustment if tag is very old
        echo "Checking out tag: ${{ steps.cp_version.outputs.version }}"
        git checkout ${{ steps.cp_version.outputs.version }}
        echo "Updating submodules..."
        git submodule update --init --recursive

    - name: Install Python Build Dependencies
      working-directory: ${{ github.workspace }}
      run: |
        pip install --upgrade pip
        # The requirements file might be in 'tools/' or root depending on CP version
        if [ -f "tools/requirements-build.txt" ]; then
          pip install -r tools/requirements-build.txt
        elif [ -f "requirements-build.txt" ]; then
          pip install -r requirements-build.txt
        else
          echo "Build requirements file not found."
          # Add known common dependencies as a fallback if needed, or fail
          # pip install wheel setuptools pyserial click # etc.
        fi
        # Ensure 'make' can find 'mpy-cross' by adding it to PATH if it's built in 'mpy-cross/'
        export PATH=$PATH:${{ github.workspace }}/mpy-cross

    # --- IMPORTANT ---
    # The PREFERRED way to handle this modification is to commit the changed
    # 'mpconfigboard.mk' file directly to your fork.
    # If you have already done that, you can REMOVE or COMMENT OUT this step.
    - name: Modify mpconfigboard.mk for I2SIn (if not already committed)
      working-directory: ${{ github.workspace }}
      run: |
        BOARD_CONFIG_PATH="ports/espressif/boards/${{ steps.board_info.outputs.name }}/mpconfigboard.mk"
        if [ -f "$BOARD_CONFIG_PATH" ]; then
          echo "Modifying $BOARD_CONFIG_PATH to enable I2SIn..."
          # Use sed to change the line. Be careful with this command.
          sed -i 's/^\(CIRCUITPY_AUDIOBUSIO_I2S_IN\s*=\s*\)0/\11/' "$BOARD_CONFIG_PATH"
          echo "Contents after modification:"
          cat "$BOARD_CONFIG_PATH"
        else
          echo "ERROR: Board config file $BOARD_CONFIG_PATH not found!"
          exit 1
        fi
      # If you commit the modified mpconfigboard.mk to your fork, this step is not needed.

    - name: Build Firmware
      working-directory: ${{ github.workspace }}/ports/espressif
      run: |
        echo "Starting build for board: ${{ steps.board_info.outputs.name }}"
        # The ESP-IDF environment should be active from the container's entrypoint
        # If not, you might need: source $IDF_PATH/export.sh (IDF_PATH is usually /opt/esp/idf)
        make BOARD=${{ steps.board_info.outputs.name }} -j$(nproc)

    - name: Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ steps.board_info.outputs.name }}-${{ steps.cp_version.outputs.version }}
        path: |
          ${{ github.workspace }}/ports/espressif/build-${{ steps.board_info.outputs.name }}/bootloader/bootloader.bin
          ${{ github.workspace }}/ports/espressif/build-${{ steps.board_info.outputs.name }}/partition_table/partition-table.bin
          ${{ github.workspace }}/ports/espressif/build-${{ steps.board_info.outputs.name }}/circuitpython.bin
          ${{ github.workspace }}/ports/espressif/build-${{ steps.board_info.outputs.name }}/*.uf2
        if-no-files-found: warn # Optional: 'error' or 'ignore'
