name: Build Custom CircuitPython Firmware

on:
  workflow_dispatch:
    inputs:
      circuitpython_version:
        description: 'CircuitPython Version (e.g., 9.2.8)'
        required: true
        default: '9.2.8'
      board_name:
        description: 'Target Board Name (e.g., yd_esp32_s3_n16r8)'
        required: true
        default: 'yd_esp32_s3_n16r8'

  push:
    branches:
      - main

jobs:
  build_firmware:
    runs-on: ubuntu-latest
    container:
      image: espressif/idf:v5.1.2 # Using this as a base for IDF tools

    steps:
    - name: Free up disk space on runner
      run: |
        echo "Attempting to free up disk space..."
        echo "Initial disk space:"
        df -h
        sudo rm -rf /usr/local/lib/android || echo "Android SDK not found or removal failed"
        sudo rm -rf /usr/share/dotnet || echo ".NET SDK not found or removal failed"
        sudo rm -rf /opt/ghc || echo "GHC not found or removal failed"
        sudo rm -rf /opt/hostedtoolcache || echo "/opt/hostedtoolcache removal failed"
        sudo rm -rf "/usr/local/share/boost" || echo "/usr/local/share/boost removal failed"
        sudo apt-get clean || echo "apt-get clean failed"
        echo "Disk space after cleanup attempts:"
        df -h
      continue-on-error: true

    - name: Checkout CircuitPython Fork
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        fetch-depth: 0
        submodules: 'false' # We will handle submodules manually

    - name: Get CircuitPython Version from Input or Default
      id: cp_version
      run: echo "version=${{ github.event.inputs.circuitpython_version || '9.2.8' }}" >> $GITHUB_OUTPUT

    - name: Get Board Name from Input or Default
      id: board_info
      run: echo "name=${{ github.event.inputs.board_name || 'yd_esp32_s3_n16r8' }}" >> $GITHUB_OUTPUT

    - name: Fetch Upstream Tags, Checkout Specific Version & Update Selective Submodules
      working-directory: ${{ github.workspace }}
      run: |
        echo "Configuring Git safe directory..."
        git config --global --add safe.directory "${GITHUB_WORKSPACE}"
        
        echo "Adding upstream remote (adafruit/circuitpython)..."
        git remote add upstream https://github.com/adafruit/circuitpython.git
        
        echo "Fetching all tags from upstream (adafruit/circuitpython)..."
        git fetch upstream --tags --prune --force
        
        echo "--- All available local tags after fetching upstream (sorted, last 50) ---"
        git tag | sort -V | tail -n 50
        echo "--- End of tag list ---"

        echo "Attempting to checkout tag: ${{ steps.cp_version.outputs.version }}"
        CP_TAG_TO_CHECKOUT="${{ steps.cp_version.outputs.version }}"
        
        if git checkout "tags/$CP_TAG_TO_CHECKOUT" -b temp-build-branch; then
          echo "Successfully checked out tags/$CP_TAG_TO_CHECKOUT to new branch temp-build-branch"
        elif git checkout "$CP_TAG_TO_CHECKOUT" -b temp-build-branch; then
           echo "Successfully checked out $CP_TAG_TO_CHECKOUT directly to new branch temp-build-branch (fallback)"
        else
          echo "ERROR: Could not checkout tag $CP_TAG_TO_CHECKOUT."
          echo "Please examine the tag list above to see if the tag is present and correctly named."
          echo "All available tags from local repository (after upstream fetch):"
          git tag
          exit 1
        fi
        
        echo "Initializing selective submodules..."
        # Step 1: Initialize only the necessary submodules
        # Add or remove submodules here based on your board's specific needs.
        git submodule init \
          lib/tinyusb \
          extmod/ulab \
          frozen/Adafruit_CircuitPython_BusDevice \
          frozen/Adafruit_CircuitPython_Register \
          frozen/Adafruit_CircuitPython_NeoPixel \
          frozen/Adafruit_CircuitPython_DotStar \
          frozen/Adafruit_CircuitPython_Display_Text \
          frozen/Adafruit_CircuitPython_ImageLoad \
          frozen/Adafruit_CircuitPython_Display_Shapes \
          frozen/Adafruit_CircuitPython_DisplayIO_SSD1306 \
          ports/espressif/esp-idf \
          lib/certificates

        echo "Updating initialized submodules recursively (this may take a while)..."
        # Step 2: Update only the submodules that were initialized in the previous step.
        # The --recursive flag will apply to these initialized submodules.
        git submodule update --recursive

    - name: Install CircuitPython's Python Build Dependencies
      working-directory: ${{ github.workspace }}
      run: |
        pip install --upgrade pip
        if [ -f "tools/requirements-build.txt" ]; then
          pip install -r tools/requirements-build.txt
        elif [ -f "requirements-build.txt" ]; then # Fallback for older CP versions if path changed
          pip install -r requirements-build.txt
        else
          echo "WARNING: Build requirements file not found at standard locations."
        fi

    - name: Modify mpconfigboard.mk for I2SIn (Your one-line change)
      working-directory: ${{ github.workspace }}
      run: |
        BOARD_CONFIG_PATH="ports/espressif/boards/${{ steps.board_info.outputs.name }}/mpconfigboard.mk"
        if [ -f "$BOARD_CONFIG_PATH" ]; then
          echo "Modifying $BOARD_CONFIG_PATH to enable CIRCUITPY_AUDIOBUSIO_I2S_IN..."
          if grep -q "CIRCUITPY_AUDIOBUSIO_I2S_IN\s*=\s*0" "$BOARD_CONFIG_PATH"; then
            sed -i 's/^\(CIRCUITPY_AUDIOBUSIO_I2S_IN\s*=\s*\)0/\11/' "$BOARD_CONFIG_PATH"
            echo "CIRCUITPY_AUDIOBUSIO_I2S_IN enabled."
          elif grep -q "CIRCUITPY_AUDIOBUSIO_I2S_IN\s*=\s*1" "$BOARD_CONFIG_PATH"; then
            echo "CIRCUITPY_AUDIOBUSIO_I2S_IN already enabled."
          else
            echo "WARNING: CIRCUITPY_AUDIOBUSIO_I2S_IN setting not found in the expected format in $BOARD_CONFIG_PATH."
            # Consider adding if missing and critical, e.g.:
            # echo "CIRCUITPY_AUDIOBUSIO_I2S_IN = 1" >> "$BOARD_CONFIG_PATH"
            # echo "Appended CIRCUITPY_AUDIOBUSIO_I2S_IN = 1 to $BOARD_CONFIG_PATH"
          fi
          echo "Contents of $BOARD_CONFIG_PATH after modification attempt:"
          cat "$BOARD_CONFIG_PATH"
        else
          echo "ERROR: Board config file $BOARD_CONFIG_PATH not found!"
          exit 1
        fi

    - name: Install ESP-IDF Toolchain via Submodule Script
      working-directory: ${{ github.workspace }}/ports/espressif
      run: |
        echo "Installing ESP-IDF tools for target esp32s3 using submodule's install.sh..."
        if [ -d "./esp-idf" ] && [ -f "./esp-idf/install.sh" ]; then
          ./esp-idf/install.sh esp32s3 # Specify all targets you might need, or list them e.g. esp32s3,esp32c3
        else
          echo "ERROR: esp-idf submodule or install.sh not found. Submodule update might have failed or paths are incorrect."
          exit 1
        fi

    - name: Build Firmware
      working-directory: ${{ github.workspace }}/ports/espressif
      run: |
        echo "Sourcing ESP-IDF environment and building for board: ${{ steps.board_info.outputs.name }}"
        if [ -f "./esp-idf/export.sh" ]; then
          source ./esp-idf/export.sh
        else
          echo "ERROR: esp-idf/export.sh not found. ESP-IDF setup might be incomplete."
          exit 1
        fi
        make BOARD=${{ steps.board_info.outputs.name }} -j$(nproc)

    - name: Upload Firmware Artifacts (BIN only)
      uses: actions/upload-artifact@v4
      with:
        name: firmware-bin-${{ steps.board_info.outputs.name }}-${{ steps.cp_version.outputs.version }}
        path: |
          ${{ github.workspace }}/ports/espressif/build-${{ steps.board_info.outputs.name }}/bootloader/bootloader.bin
          ${{ github.workspace }}/ports/espressif/build-${{ steps.board_info.outputs.name }}/partition_table/partition-table.bin
          ${{ github.workspace }}/ports/espressif/build-${{ steps.board_info.outputs.name }}/circuitpython.bin
        if-no-files-found: error
